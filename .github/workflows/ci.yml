name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  frontend:
    name: Frontend Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: tennis-frontend
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: npm ci
      - name: Build Angular App
        run: npm run build -- --configuration production
      - name: Upload Frontend Build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/tennis-frontend

  backend:
    name: Backend Test & Coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: npm ci
      - name: Run Tests
        run: npm test
      - name: Run Coverage
        run: npm run test:coverage
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: coverage
      - name: Check Coverage Threshold
        run: |
          npx nyc check-coverage --lines 90 --functions 90 --branches 90

  performance:
    runs-on: ubuntu-latest
    needs: backend
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'perf')
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: tennis_store
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    defaults:
      run:
        working-directory: k6-tests
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Setup database for performance tests
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -proot -e "
          CREATE DATABASE IF NOT EXISTS tennis_store;
          USE tennis_store;
          
          CREATE TABLE IF NOT EXISTS products (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            description TEXT,
            price DECIMAL(10,2) NOT NULL,
            image VARCHAR(255),
            category VARCHAR(50),
            brand VARCHAR(50),
            size VARCHAR(10),
            stock INT DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          INSERT INTO products (name, description, price, image, category, brand, size, stock) VALUES 
          ('Nike Air Max', 'Zapatos deportivos Nike', 120.00, 'nike-air-max.jpg', 'running', 'Nike', '42', 50),
          ('Adidas Ultraboost', 'Zapatos deportivos Adidas', 150.00, 'adidas-ultraboost.jpg', 'running', 'Adidas', '42', 30),
          ('Puma RS-X', 'Zapatos deportivos Puma', 100.00, 'puma-rs-x.jpg', 'lifestyle', 'Puma', '42', 40);
          "

      - name: Create environment file
        working-directory: ./backend
        run: |
          cat > .env << EOF
          DB_HOST=127.0.0.1
          DB_USER=root
          DB_PASSWORD=root
          DB_NAME=tennis_store
          DB_PORT=3306
          JWT_SECRET=test_jwt_secret_key_for_ci
          NODE_ENV=production
          PORT=3000
          EOF

      - name: Start backend server
        working-directory: ./backend
        run: |
          npm start &
          echo $! > server.pid
          sleep 10
          curl -f http://localhost:3000/api/products || exit 1

      - name: Create reports directory
        run: mkdir -p reports

      - name: Run Ramp Test
        run: k6 run --out json=reports/ramp.json ramp.js
        env:
          CI_MODE: true

      - name: Run Spike Test
        run: k6 run --out json=reports/spike.json spike.js
        env:
          CI_MODE: true

      - name: Run Soak Test
        run: k6 run --out json=reports/soak.json soak.js
        env:
          CI_MODE: true

      - name: Stop backend server
        if: always()
        working-directory: ./backend
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

      - name: Upload k6 Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: k6-reports
          path: k6-tests/reports/
          retention-days: 30
